---------------------Database Setup (MySQL Example)----------------------------
CREATE DATABASE student_db;

USE student_db;

CREATE TABLE students (
    student_id INT PRIMARY KEY,
    name VARCHAR(50),
    department VARCHAR(50),
    marks FLOAT
);

--------------------------- Model: Student.java-----------------------------------

Represents the student entity.

public class Student {
    private int studentId;
    private String name;
    private String department;
    private float marks;

    // Constructor
    public Student(int studentId, String name, String department, float marks) {
        this.studentId = studentId;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }

    // Getters and Setters
    public int getStudentId() { return studentId; }
    public void setStudentId(int studentId) { this.studentId = studentId; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getDepartment() { return department; }
    public void setDepartment(String department) { this.department = department; }

    public float getMarks() { return marks; }
    public void setMarks(float marks) { this.marks = marks; }

    @Override
    public String toString() {
        return studentId + "\t" + name + "\t" + department + "\t" + marks;
    }
}

---------------------------Controller: StudentController.java-----------------------------------------

Handles database operations (CRUD) using JDBC.

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class StudentController {
    private Connection conn;

    public StudentController() {
        try {
            // JDBC connection
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/student_db", "nancyoracle", "system"
            );
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Add new student
    public void addStudent(Student student) {
        String sql = "INSERT INTO students(student_id, name, department, marks) VALUES(?,?,?,?)";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, student.getStudentId());
            ps.setString(2, student.getName());
            ps.setString(3, student.getDepartment());
            ps.setFloat(4, student.getMarks());
            ps.executeUpdate();
            System.out.println("Student added successfully.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // View all students
    public List<Student> getAllStudents() {
        List<Student> list = new ArrayList<>();
        String sql = "SELECT * FROM students";
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                Student s = new Student(
                    rs.getInt("student_id"),
                    rs.getString("name"),
                    rs.getString("department"),
                    rs.getFloat("marks")
                );
                list.add(s);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    // Update student details
    public void updateStudent(Student student) {
        String sql = "UPDATE students SET name=?, department=?, marks=? WHERE student_id=?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, student.getName());
            ps.setString(2, student.getDepartment());
            ps.setFloat(3, student.getMarks());
            ps.setInt(4, student.getStudentId());
            int rows = ps.executeUpdate();
            if (rows > 0) System.out.println("Student updated successfully.");
            else System.out.println("Student not found.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Delete student
    public void deleteStudent(int studentId) {
        String sql = "DELETE FROM students WHERE student_id=?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, studentId);
            int rows = ps.executeUpdate();
            if (rows > 0) System.out.println("Student deleted successfully.");
            else System.out.println("Student not found.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

------------------------------------ View: StudentView.java------------------------------------------------

Menu-driven interface for user input.

import java.util.List;
import java.util.Scanner;

public class StudentView {
    private static Scanner sc = new Scanner(System.in);
    private static StudentController controller = new StudentController();

    public static void main(String[] args) {
        int choice;
        do {
            System.out.println("\n--- Student Management ---");
            System.out.println("1. Add Student");
            System.out.println("2. View All Students");
            System.out.println("3. Update Student");
            System.out.println("4. Delete Student");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1: addStudent(); break;
                case 2: viewStudents(); break;
                case 3: updateStudent(); break;
                case 4: deleteStudent(); break;
                case 5: System.out.println("Exiting..."); break;
                default: System.out.println("Invalid choice!");
            }
        } while (choice != 5);
    }

    private static void addStudent() {
        System.out.print("Enter Student ID: "); int id = sc.nextInt();
        sc.nextLine(); // consume newline
        System.out.print("Enter Name: "); String name = sc.nextLine();
        System.out.print("Enter Department: "); String dept = sc.nextLine();
        System.out.print("Enter Marks: "); float marks = sc.nextFloat();
        Student s = new Student(id, name, dept, marks);
        controller.addStudent(s);
    }

    private static void viewStudents() {
        List<Student> students = controller.getAllStudents();
        System.out.println("ID\tName\tDepartment\tMarks");
        for (Student s : students) {
            System.out.println(s);
        }
    }

    private static void updateStudent() {
        System.out.print("Enter Student ID to update: "); int id = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter New Name: "); String name = sc.nextLine();
        System.out.print("Enter New Department: "); String dept = sc.nextLine();
        System.out.print("Enter New Marks: "); float marks = sc.nextFloat();
        Student s = new Student(id, name, dept, marks);
        controller.updateStudent(s);
    }

    private static void deleteStudent() {
        System.out.print("Enter Student ID to delete: "); int id = sc.nextInt();
        controller.deleteStudent(id);
    }
}
